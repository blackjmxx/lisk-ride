{"ast":null,"code":"// eslint-disable-file\nimport React from 'react';\nexport const addEvent = function (elem, type, eventHandle) {\n  if (elem === null || typeof elem === 'undefined') {\n    return;\n  }\n\n  if (elem.addEventListener) {\n    elem.addEventListener(type, eventHandle, false);\n  } else if (elem.attachEvent) {\n    elem.attachEvent(`on${type}`, eventHandle);\n  } else {\n    elem[`on${type}`] = eventHandle;\n  }\n};\nexport const removeEvent = function (elem, type, eventHandle) {\n  if (elem === null || typeof elem === 'undefined') {\n    return;\n  }\n\n  if (elem.removeEventListener) {\n    elem.removeEventListener(type, eventHandle, false);\n  } else if (elem.detachEvent) {\n    elem.detachEvent(`on${type}`, eventHandle);\n  } else {\n    elem[`on${type}`] = null;\n  }\n};\nexport const addAccessibility = (children, slidesToShow, currentSlide) => {\n  let needsTabIndex;\n\n  if (slidesToShow > 1) {\n    return React.Children.map(children, (child, index) => {\n      const firstVisibleSlide = index >= currentSlide;\n      const lastVisibleSlide = index < slidesToShow + currentSlide;\n      needsTabIndex = firstVisibleSlide && lastVisibleSlide;\n      const ariaProps = needsTabIndex ? {\n        'aria-hidden': 'false',\n        tabIndex: 0\n      } : {\n        'aria-hidden': 'true'\n      };\n      return React.cloneElement(child, { ...child.props,\n        ...ariaProps\n      });\n    });\n  } else {\n    return React.Children.map(children, (child, index) => {\n      needsTabIndex = index !== currentSlide;\n      const ariaProps = needsTabIndex ? {\n        'aria-hidden': 'true'\n      } : {\n        'aria-hidden': 'false',\n        tabIndex: 0\n      };\n      return React.cloneElement(child, { ...child.props,\n        ...ariaProps\n      });\n    });\n  }\n};\nexport const getPropsByTransitionMode = (props, keys) => {\n  const {\n    slidesToShow,\n    transitionMode\n  } = props;\n  const updatedDefaults = {};\n\n  if (transitionMode === 'fade') {\n    keys.forEach(key => {\n      switch (key) {\n        case 'slidesToShow':\n          updatedDefaults[key] = Math.max(parseInt(slidesToShow), 1);\n          break;\n\n        case 'slidesToScroll':\n          updatedDefaults[key] = Math.max(parseInt(slidesToShow), 1);\n          break;\n\n        case 'cellAlign':\n          updatedDefaults[key] = 'left';\n          break;\n\n        default:\n          updatedDefaults[key] = props[key];\n          break;\n      }\n    });\n  } else {\n    keys.forEach(key => {\n      updatedDefaults[key] = props[key];\n    });\n  }\n\n  return updatedDefaults;\n};\nexport const swipeDirection = (x1, x2, y1, y2, vertical) => {\n  const xDist = x1 - x2;\n  const yDist = y1 - y2;\n  const r = Math.atan2(yDist, xDist);\n  let swipeAngle = Math.round(r * 180 / Math.PI);\n\n  if (swipeAngle < 0) {\n    swipeAngle = 360 - Math.abs(swipeAngle);\n  }\n\n  if (swipeAngle <= 45 && swipeAngle >= 0) {\n    return 1;\n  }\n\n  if (swipeAngle <= 360 && swipeAngle >= 315) {\n    return 1;\n  }\n\n  if (swipeAngle >= 135 && swipeAngle <= 225) {\n    return -1;\n  }\n\n  if (vertical === true) {\n    if (swipeAngle >= 35 && swipeAngle <= 135) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n\n  return 0;\n};\nexport const shouldUpdate = (curr, next, keys) => {\n  let update = false;\n\n  for (let i = 0; i < keys.length; i++) {\n    if (curr[keys[i]] !== next[keys[i]]) {\n      update = true;\n      break;\n    }\n  }\n\n  return update;\n};\nexport const calcSomeInitialState = props => {\n  const {\n    slidesToScroll,\n    slidesToShow,\n    cellAlign\n  } = getPropsByTransitionMode(props, ['slidesToScroll', 'slidesToShow', 'cellAlign']);\n  const slideWidth = props.vertical ? props.initialSlideHeight || 0 : props.initialSlideWidth || 0;\n  const slideHeight = props.vertical ? (props.initialSlideHeight || 0) * props.slidesToShow : props.initialSlideHeight || 0;\n  const frameHeight = slideHeight + props.cellSpacing * (slidesToShow - 1);\n  const frameWidth = props.vertical ? frameHeight : '100%';\n  return {\n    slideWidth,\n    slideHeight,\n    frameWidth,\n    slidesToScroll,\n    slidesToShow,\n    cellAlign\n  };\n};","map":{"version":3,"sources":["/Users/blackjmxx/Devs/LiskRide/src/components/nuka-carousel/utilities/utilities.js"],"names":["React","addEvent","elem","type","eventHandle","addEventListener","attachEvent","removeEvent","removeEventListener","detachEvent","addAccessibility","children","slidesToShow","currentSlide","needsTabIndex","Children","map","child","index","firstVisibleSlide","lastVisibleSlide","ariaProps","tabIndex","cloneElement","props","getPropsByTransitionMode","keys","transitionMode","updatedDefaults","forEach","key","Math","max","parseInt","swipeDirection","x1","x2","y1","y2","vertical","xDist","yDist","r","atan2","swipeAngle","round","PI","abs","shouldUpdate","curr","next","update","i","length","calcSomeInitialState","slidesToScroll","cellAlign","slideWidth","initialSlideHeight","initialSlideWidth","slideHeight","frameHeight","cellSpacing","frameWidth"],"mappings":"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","sourcesContent":["// eslint-disable-file\nimport React from 'react';\n\nexport const addEvent = function(elem, type, eventHandle) {\n  if (elem === null || typeof elem === 'undefined') {\n    return;\n  }\n  if (elem.addEventListener) {\n    elem.addEventListener(type, eventHandle, false);\n  } else if (elem.attachEvent) {\n    elem.attachEvent(`on${type}`, eventHandle);\n  } else {\n    elem[`on${type}`] = eventHandle;\n  }\n};\n\nexport const removeEvent = function(elem, type, eventHandle) {\n  if (elem === null || typeof elem === 'undefined') {\n    return;\n  }\n  if (elem.removeEventListener) {\n    elem.removeEventListener(type, eventHandle, false);\n  } else if (elem.detachEvent) {\n    elem.detachEvent(`on${type}`, eventHandle);\n  } else {\n    elem[`on${type}`] = null;\n  }\n};\n\nexport const addAccessibility = (children, slidesToShow, currentSlide) => {\n  let needsTabIndex;\n  if (slidesToShow > 1) {\n    return React.Children.map(children, (child, index) => {\n      const firstVisibleSlide = index >= currentSlide;\n      const lastVisibleSlide = index < slidesToShow + currentSlide;\n      needsTabIndex = firstVisibleSlide && lastVisibleSlide;\n      const ariaProps = needsTabIndex\n        ? { 'aria-hidden': 'false', tabIndex: 0 }\n        : { 'aria-hidden': 'true' };\n      return React.cloneElement(child, {\n        ...child.props,\n        ...ariaProps\n      });\n    });\n  } else {\n    return React.Children.map(children, (child, index) => {\n      needsTabIndex = index !== currentSlide;\n      const ariaProps = needsTabIndex\n        ? { 'aria-hidden': 'true' }\n        : { 'aria-hidden': 'false', tabIndex: 0 };\n      return React.cloneElement(child, {\n        ...child.props,\n        ...ariaProps\n      });\n    });\n  }\n};\n\nexport const getPropsByTransitionMode = (props, keys) => {\n  const { slidesToShow, transitionMode } = props;\n  const updatedDefaults = {};\n  if (transitionMode === 'fade') {\n    keys.forEach(key => {\n      switch (key) {\n        case 'slidesToShow':\n          updatedDefaults[key] = Math.max(parseInt(slidesToShow), 1);\n          break;\n        case 'slidesToScroll':\n          updatedDefaults[key] = Math.max(parseInt(slidesToShow), 1);\n          break;\n        case 'cellAlign':\n          updatedDefaults[key] = 'left';\n          break;\n        default:\n          updatedDefaults[key] = props[key];\n          break;\n      }\n    });\n  } else {\n    keys.forEach(key => {\n      updatedDefaults[key] = props[key];\n    });\n  }\n\n  return updatedDefaults;\n};\n\nexport const swipeDirection = (x1, x2, y1, y2, vertical) => {\n  const xDist = x1 - x2;\n  const yDist = y1 - y2;\n  const r = Math.atan2(yDist, xDist);\n  let swipeAngle = Math.round((r * 180) / Math.PI);\n\n  if (swipeAngle < 0) {\n    swipeAngle = 360 - Math.abs(swipeAngle);\n  }\n  if (swipeAngle <= 45 && swipeAngle >= 0) {\n    return 1;\n  }\n  if (swipeAngle <= 360 && swipeAngle >= 315) {\n    return 1;\n  }\n  if (swipeAngle >= 135 && swipeAngle <= 225) {\n    return -1;\n  }\n  if (vertical === true) {\n    if (swipeAngle >= 35 && swipeAngle <= 135) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n  return 0;\n};\n\nexport const shouldUpdate = (curr, next, keys) => {\n  let update = false;\n\n  for (let i = 0; i < keys.length; i++) {\n    if (curr[keys[i]] !== next[keys[i]]) {\n      update = true;\n      break;\n    }\n  }\n\n  return update;\n};\n\nexport const calcSomeInitialState = props => {\n  const { slidesToScroll, slidesToShow, cellAlign } = getPropsByTransitionMode(\n    props,\n    ['slidesToScroll', 'slidesToShow', 'cellAlign']\n  );\n\n  const slideWidth = props.vertical\n    ? props.initialSlideHeight || 0\n    : props.initialSlideWidth || 0;\n  const slideHeight = props.vertical\n    ? (props.initialSlideHeight || 0) * props.slidesToShow\n    : props.initialSlideHeight || 0;\n\n  const frameHeight = slideHeight + props.cellSpacing * (slidesToShow - 1);\n\n  const frameWidth = props.vertical ? frameHeight : '100%';\n  return {\n    slideWidth,\n    slideHeight,\n    frameWidth,\n    slidesToScroll,\n    slidesToShow,\n    cellAlign\n  };\n};\n"]},"metadata":{},"sourceType":"module"}