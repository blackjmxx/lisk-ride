{"ast":null,"code":"var _jsxFileName = \"/Users/blackjmxx/Devs/LiskRide/src/components/nuka-carousel/transitions/scroll-transition.js\";\n\n/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nconst MIN_ZOOM_SCALE = 0;\nconst MAX_ZOOM_SCALE = 1;\nexport default class ScrollTransition extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getListStyles = this.getListStyles.bind(this);\n  }\n\n  getSlideDirection(start, end, isWrapping) {\n    let direction = 0;\n    if (start === end) return direction;\n\n    if (isWrapping) {\n      direction = start < end ? -1 : 1;\n    } else {\n      direction = start < end ? 1 : -1;\n    }\n\n    return direction;\n  }\n  /* eslint-disable complexity */\n\n\n  getSlideTargetPosition(index, positionValue) {\n    let targetPosition = (this.props.slideWidth + this.props.cellSpacing) * index;\n    let cellAlignOffset = 0;\n\n    switch (this.props.cellAlign) {\n      case 'center':\n        cellAlignOffset = (this.props.slideWidth + this.props.cellSpacing) * ((this.props.slidesToShow - 1) / 2);\n        break;\n\n      case 'right':\n        cellAlignOffset = (this.props.slideWidth + this.props.cellSpacing) * (this.props.slidesToShow - 1);\n        break;\n    }\n\n    const startSlide = Math.min(Math.floor(Math.abs((positionValue - cellAlignOffset) / this.props.slideWidth)), this.props.slideCount - 1);\n    let offset = 0;\n\n    if (this.props.animation === 'zoom' && (this.props.currentSlide === index + 1 || this.props.currentSlide === 0 && index === this.props.children.length - 1)) {\n      offset = this.props.slideOffset;\n    } else if (this.props.animation === 'zoom' && (this.props.currentSlide === index - 1 || this.props.currentSlide === this.props.children.length - 1 && index === 0)) {\n      offset = -this.props.slideOffset;\n    }\n\n    if (this.props.wrapAround && index !== startSlide) {\n      const direction = this.getSlideDirection(startSlide, this.props.currentSlide, this.props.isWrappingAround);\n      let slidesBefore = 0;\n      let slidesAfter = 0;\n\n      switch (this.props.cellAlign) {\n        case 'left':\n          if (direction < 0) {\n            slidesBefore = this.props.slidesToScroll;\n            slidesAfter = this.props.slideCount - this.props.slidesToScroll - 1;\n          } else {\n            slidesBefore = 0;\n            slidesAfter = this.props.slideCount - 1;\n          }\n\n          break;\n\n        case 'center':\n          if (direction === 0) {\n            slidesBefore = Math.floor((this.props.slideCount - 1) / 2);\n            slidesAfter = this.props.slideCount - slidesBefore - 1;\n          } else {\n            const visibleSlidesFromCenter = Math.ceil((this.props.slidesToShow - 1) / 2);\n            const slidesScrollDirection = Math.min(visibleSlidesFromCenter + this.props.slidesToScroll, this.props.slideCount - 1);\n            const slidesOppositeDirection = this.props.slideCount - slidesScrollDirection - 1;\n\n            if (direction > 0) {\n              slidesAfter = slidesScrollDirection;\n              slidesBefore = slidesOppositeDirection;\n            } else if (direction < 0) {\n              slidesBefore = slidesScrollDirection;\n              slidesAfter = slidesOppositeDirection;\n            }\n          }\n\n          break;\n\n        case 'right':\n          if (direction > 0) {\n            slidesBefore = this.props.slideCount - this.props.slidesToScroll - 1;\n            slidesAfter = this.props.slidesToScroll;\n          } else {\n            slidesBefore = this.props.slideCount - 1;\n            slidesAfter = 0;\n          }\n\n          break;\n      }\n\n      const distanceFromStart = Math.abs(startSlide - index);\n\n      if (index < startSlide) {\n        if (distanceFromStart > slidesBefore) {\n          targetPosition = (this.props.slideWidth + this.props.cellSpacing) * (this.props.slideCount + index);\n        }\n      } else if (distanceFromStart > slidesAfter) {\n        targetPosition = (this.props.slideWidth + this.props.cellSpacing) * (this.props.slideCount - index) * -1;\n      }\n    }\n\n    return targetPosition + offset;\n  }\n  /* eslint-enable complexity */\n\n\n  formatChildren(children) {\n    const {\n      top,\n      left,\n      currentSlide,\n      slidesToShow\n    } = this.props;\n    const positionValue = this.props.vertical ? top : left;\n    return React.Children.map(children, (child, index) => {\n      const visible = index >= currentSlide && index < currentSlide + slidesToShow;\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: `slider-slide${visible ? ' slide-visible' : ''}`,\n        style: this.getSlideStyles(index, positionValue),\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, child);\n    });\n  }\n\n  getSlideStyles(index, positionValue) {\n    const targetPosition = this.getSlideTargetPosition(index, positionValue);\n    const transformScale = this.props.animation === 'zoom' && this.props.currentSlide !== index ? Math.max(Math.min(this.props.zoomScale, MAX_ZOOM_SCALE), MIN_ZOOM_SCALE) : 1.0;\n    return {\n      boxSizing: 'border-box',\n      display: this.props.vertical ? 'block' : 'inline-block',\n      height: 'auto',\n      left: this.props.vertical ? 0 : targetPosition,\n      listStyleType: 'none',\n      marginBottom: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      marginLeft: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginRight: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginTop: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      MozBoxSizing: 'border-box',\n      position: 'absolute',\n      top: this.props.vertical ? targetPosition : 0,\n      transform: `scale(${transformScale})`,\n      transition: 'transform .4s linear',\n      verticalAlign: 'top',\n      width: this.props.vertical ? '100%' : this.props.slideWidth\n    };\n  }\n\n  getListStyles(styles) {\n    const {\n      deltaX,\n      deltaY\n    } = styles;\n    const listWidth = this.props.slideWidth * React.Children.count(this.props.children);\n    const spacingOffset = this.props.cellSpacing * React.Children.count(this.props.children);\n    const transform = `translate3d(${deltaX}px, ${deltaY}px, 0)`;\n    return {\n      transform,\n      WebkitTransform: transform,\n      msTransform: `translate(${deltaX}px, ${deltaY}px)`,\n      position: 'relative',\n      display: 'block',\n      margin: this.props.vertical ? `${this.props.cellSpacing / 2 * -1}px 0px` : `0px ${this.props.cellSpacing / 2 * -1}px`,\n      padding: 0,\n      height: this.props.vertical ? listWidth + spacingOffset : this.props.slideHeight,\n      width: this.props.vertical ? 'auto' : listWidth + spacingOffset,\n      cursor: this.props.dragging === true ? 'pointer' : 'inherit',\n      boxSizing: 'border-box',\n      MozBoxSizing: 'border-box',\n      touchAction: `pinch-zoom ${this.props.vertical ? 'pan-x' : 'pan-y'}`\n    };\n  }\n\n  render() {\n    const children = this.formatChildren(this.props.children);\n    const deltaX = this.props.deltaX;\n    const deltaY = this.props.deltaY;\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"slider-list\",\n      style: this.getListStyles({\n        deltaX,\n        deltaY\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n}\nScrollTransition.propTypes = {\n  animation: PropTypes.oneOf(['zoom']),\n  cellAlign: PropTypes.string,\n  cellSpacing: PropTypes.number,\n  currentSlide: PropTypes.number,\n  deltaX: PropTypes.number,\n  deltaY: PropTypes.number,\n  dragging: PropTypes.bool,\n  isWrappingAround: PropTypes.bool,\n  left: PropTypes.number,\n  slideCount: PropTypes.number,\n  slideHeight: PropTypes.number,\n  slidesToScroll: PropTypes.number,\n  slideOffset: PropTypes.number,\n  slideWidth: PropTypes.number,\n  top: PropTypes.number,\n  vertical: PropTypes.bool,\n  wrapAround: PropTypes.bool,\n  zoomScale: PropTypes.number\n};\nScrollTransition.defaultProps = {\n  cellAlign: 'left',\n  cellSpacing: 0,\n  currentSlide: 0,\n  deltaX: 0,\n  deltaY: 0,\n  dragging: false,\n  isWrappingAround: false,\n  left: 0,\n  slideCount: 0,\n  slideHeight: 0,\n  slidesToScroll: 1,\n  slideWidth: 0,\n  top: 0,\n  vertical: false,\n  wrapAround: false,\n  zoomScale: 0.85\n};","map":{"version":3,"sources":["/Users/blackjmxx/Devs/LiskRide/src/components/nuka-carousel/transitions/scroll-transition.js"],"names":["React","PropTypes","MIN_ZOOM_SCALE","MAX_ZOOM_SCALE","ScrollTransition","Component","constructor","props","getListStyles","bind","getSlideDirection","start","end","isWrapping","direction","getSlideTargetPosition","index","positionValue","targetPosition","slideWidth","cellSpacing","cellAlignOffset","cellAlign","slidesToShow","startSlide","Math","min","floor","abs","slideCount","offset","animation","currentSlide","children","length","slideOffset","wrapAround","isWrappingAround","slidesBefore","slidesAfter","slidesToScroll","visibleSlidesFromCenter","ceil","slidesScrollDirection","slidesOppositeDirection","distanceFromStart","formatChildren","top","left","vertical","Children","map","child","visible","getSlideStyles","transformScale","max","zoomScale","boxSizing","display","height","listStyleType","marginBottom","marginLeft","marginRight","marginTop","MozBoxSizing","position","transform","transition","verticalAlign","width","styles","deltaX","deltaY","listWidth","count","spacingOffset","WebkitTransform","msTransform","margin","padding","slideHeight","cursor","dragging","touchAction","render","propTypes","oneOf","string","number","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MIN_ZOOM_SCALE = 0;\nconst MAX_ZOOM_SCALE = 1;\n\nexport default class ScrollTransition extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getListStyles = this.getListStyles.bind(this);\n  }\n\n  getSlideDirection(start, end, isWrapping) {\n    let direction = 0;\n    if (start === end) return direction;\n\n    if (isWrapping) {\n      direction = start < end ? -1 : 1;\n    } else {\n      direction = start < end ? 1 : -1;\n    }\n\n    return direction;\n  }\n\n  /* eslint-disable complexity */\n  getSlideTargetPosition(index, positionValue) {\n    let targetPosition =\n      (this.props.slideWidth + this.props.cellSpacing) * index;\n\n    let cellAlignOffset = 0;\n    switch (this.props.cellAlign) {\n      case 'center':\n        cellAlignOffset =\n          (this.props.slideWidth + this.props.cellSpacing) *\n          ((this.props.slidesToShow - 1) / 2);\n        break;\n      case 'right':\n        cellAlignOffset =\n          (this.props.slideWidth + this.props.cellSpacing) *\n          (this.props.slidesToShow - 1);\n        break;\n    }\n\n    const startSlide = Math.min(\n      Math.floor(\n        Math.abs((positionValue - cellAlignOffset) / this.props.slideWidth)\n      ),\n      this.props.slideCount - 1\n    );\n\n    let offset = 0;\n\n    if (\n      this.props.animation === 'zoom' &&\n      (this.props.currentSlide === index + 1 ||\n        (this.props.currentSlide === 0 &&\n          index === this.props.children.length - 1))\n    ) {\n      offset = this.props.slideOffset;\n    } else if (\n      this.props.animation === 'zoom' &&\n      (this.props.currentSlide === index - 1 ||\n        (this.props.currentSlide === this.props.children.length - 1 &&\n          index === 0))\n    ) {\n      offset = -this.props.slideOffset;\n    }\n\n    if (this.props.wrapAround && index !== startSlide) {\n      const direction = this.getSlideDirection(\n        startSlide,\n        this.props.currentSlide,\n        this.props.isWrappingAround\n      );\n      let slidesBefore = 0;\n      let slidesAfter = 0;\n\n      switch (this.props.cellAlign) {\n        case 'left':\n          if (direction < 0) {\n            slidesBefore = this.props.slidesToScroll;\n            slidesAfter = this.props.slideCount - this.props.slidesToScroll - 1;\n          } else {\n            slidesBefore = 0;\n            slidesAfter = this.props.slideCount - 1;\n          }\n          break;\n\n        case 'center':\n          if (direction === 0) {\n            slidesBefore = Math.floor((this.props.slideCount - 1) / 2);\n            slidesAfter = this.props.slideCount - slidesBefore - 1;\n          } else {\n            const visibleSlidesFromCenter = Math.ceil(\n              (this.props.slidesToShow - 1) / 2\n            );\n            const slidesScrollDirection = Math.min(\n              visibleSlidesFromCenter + this.props.slidesToScroll,\n              this.props.slideCount - 1\n            );\n            const slidesOppositeDirection =\n              this.props.slideCount - slidesScrollDirection - 1;\n\n            if (direction > 0) {\n              slidesAfter = slidesScrollDirection;\n              slidesBefore = slidesOppositeDirection;\n            } else if (direction < 0) {\n              slidesBefore = slidesScrollDirection;\n              slidesAfter = slidesOppositeDirection;\n            }\n          }\n          break;\n\n        case 'right':\n          if (direction > 0) {\n            slidesBefore =\n              this.props.slideCount - this.props.slidesToScroll - 1;\n            slidesAfter = this.props.slidesToScroll;\n          } else {\n            slidesBefore = this.props.slideCount - 1;\n            slidesAfter = 0;\n          }\n          break;\n      }\n\n      const distanceFromStart = Math.abs(startSlide - index);\n      if (index < startSlide) {\n        if (distanceFromStart > slidesBefore) {\n          targetPosition =\n            (this.props.slideWidth + this.props.cellSpacing) *\n            (this.props.slideCount + index);\n        }\n      } else if (distanceFromStart > slidesAfter) {\n        targetPosition =\n          (this.props.slideWidth + this.props.cellSpacing) *\n          (this.props.slideCount - index) *\n          -1;\n      }\n    }\n\n    return targetPosition + offset;\n  }\n  /* eslint-enable complexity */\n\n  formatChildren(children) {\n    const { top, left, currentSlide, slidesToShow } = this.props;\n    const positionValue = this.props.vertical ? top : left;\n    return React.Children.map(children, (child, index) => {\n      const visible =\n        index >= currentSlide && index < currentSlide + slidesToShow;\n      return (\n        <li\n          className={`slider-slide${visible ? ' slide-visible' : ''}`}\n          style={this.getSlideStyles(index, positionValue)}\n          key={index}\n        >\n          {child}\n        </li>\n      );\n    });\n  }\n\n  getSlideStyles(index, positionValue) {\n    const targetPosition = this.getSlideTargetPosition(index, positionValue);\n    const transformScale =\n      this.props.animation === 'zoom' && this.props.currentSlide !== index\n        ? Math.max(\n            Math.min(this.props.zoomScale, MAX_ZOOM_SCALE),\n            MIN_ZOOM_SCALE\n          )\n        : 1.0;\n    return {\n      boxSizing: 'border-box',\n      display: this.props.vertical ? 'block' : 'inline-block',\n      height: 'auto',\n      left: this.props.vertical ? 0 : targetPosition,\n      listStyleType: 'none',\n      marginBottom: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      marginLeft: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginRight: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginTop: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      MozBoxSizing: 'border-box',\n      position: 'absolute',\n      top: this.props.vertical ? targetPosition : 0,\n      transform: `scale(${transformScale})`,\n      transition: 'transform .4s linear',\n      verticalAlign: 'top',\n      width: this.props.vertical ? '100%' : this.props.slideWidth\n    };\n  }\n\n  getListStyles(styles) {\n    const { deltaX, deltaY } = styles;\n\n    const listWidth =\n      this.props.slideWidth * React.Children.count(this.props.children);\n    const spacingOffset =\n      this.props.cellSpacing * React.Children.count(this.props.children);\n    const transform = `translate3d(${deltaX}px, ${deltaY}px, 0)`;\n    return {\n      transform,\n      WebkitTransform: transform,\n      msTransform: `translate(${deltaX}px, ${deltaY}px)`,\n      position: 'relative',\n      display: 'block',\n      margin: this.props.vertical\n        ? `${(this.props.cellSpacing / 2) * -1}px 0px`\n        : `0px ${(this.props.cellSpacing / 2) * -1}px`,\n      padding: 0,\n      height: this.props.vertical\n        ? listWidth + spacingOffset\n        : this.props.slideHeight,\n      width: this.props.vertical ? 'auto' : listWidth + spacingOffset,\n      cursor: this.props.dragging === true ? 'pointer' : 'inherit',\n      boxSizing: 'border-box',\n      MozBoxSizing: 'border-box',\n      touchAction: `pinch-zoom ${this.props.vertical ? 'pan-x' : 'pan-y'}`\n    };\n  }\n\n  render() {\n    const children = this.formatChildren(this.props.children);\n    const deltaX = this.props.deltaX;\n    const deltaY = this.props.deltaY;\n\n    return (\n      <ul\n        className=\"slider-list\"\n        style={this.getListStyles({ deltaX, deltaY })}\n      >\n        {children}\n      </ul>\n    );\n  }\n}\n\nScrollTransition.propTypes = {\n  animation: PropTypes.oneOf(['zoom']),\n  cellAlign: PropTypes.string,\n  cellSpacing: PropTypes.number,\n  currentSlide: PropTypes.number,\n  deltaX: PropTypes.number,\n  deltaY: PropTypes.number,\n  dragging: PropTypes.bool,\n  isWrappingAround: PropTypes.bool,\n  left: PropTypes.number,\n  slideCount: PropTypes.number,\n  slideHeight: PropTypes.number,\n  slidesToScroll: PropTypes.number,\n  slideOffset: PropTypes.number,\n  slideWidth: PropTypes.number,\n  top: PropTypes.number,\n  vertical: PropTypes.bool,\n  wrapAround: PropTypes.bool,\n  zoomScale: PropTypes.number\n};\n\nScrollTransition.defaultProps = {\n  cellAlign: 'left',\n  cellSpacing: 0,\n  currentSlide: 0,\n  deltaX: 0,\n  deltaY: 0,\n  dragging: false,\n  isWrappingAround: false,\n  left: 0,\n  slideCount: 0,\n  slideHeight: 0,\n  slidesToScroll: 1,\n  slideWidth: 0,\n  top: 0,\n  vertical: false,\n  wrapAround: false,\n  zoomScale: 0.85\n};\n"]},"metadata":{},"sourceType":"module"}