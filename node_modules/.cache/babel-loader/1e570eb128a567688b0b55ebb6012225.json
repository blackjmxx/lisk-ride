{"ast":null,"code":"// eslint-disable-file\nimport React from 'react';\nexport const addAccessibility = (children, slidesToShow) => {\n  if (slidesToShow > 1) {\n    return React.Children.map(children, child => {\n      return React.cloneElement(child, child.props);\n    });\n  } else {\n    // when slidesToshow is 1\n    return React.Children.map(children, child => {\n      return React.cloneElement(child, child.props);\n    });\n  }\n};\nexport const getValidChildren = children => {\n  // .toArray automatically removes invalid React children\n  return React.Children.toArray(children);\n};\n\nconst findMaxHeightSlide = slides => {\n  let maxHeight = 0;\n\n  for (let i = 0; i < slides.length; i++) {\n    if (slides[i].offsetHeight > maxHeight) {\n      maxHeight = slides[i].offsetHeight;\n    }\n  }\n\n  return maxHeight;\n};\n\nexport const getSlideHeight = (props, state, childNodes = []) => {\n  const {\n    heightMode,\n    vertical,\n    initialSlideHeight\n  } = props;\n  const {\n    slidesToShow,\n    currentSlide\n  } = state;\n  const firstSlide = childNodes[0];\n\n  if (firstSlide && heightMode === 'first') {\n    return vertical ? firstSlide.offsetHeight * slidesToShow : firstSlide.offsetHeight;\n  }\n\n  if (heightMode === 'max') {\n    return findMaxHeightSlide(childNodes);\n  }\n\n  if (heightMode === 'current') {\n    return childNodes[currentSlide].offsetHeight;\n  }\n\n  return initialSlideHeight || 100;\n};","map":{"version":3,"sources":["/Users/blackjmxx/Devs/LiskRide/src/components/nuka-carousel/utilities/bootstrapping-utilities.js"],"names":["React","addAccessibility","children","slidesToShow","Children","map","child","cloneElement","props","getValidChildren","toArray","findMaxHeightSlide","slides","maxHeight","i","length","offsetHeight","getSlideHeight","state","childNodes","heightMode","vertical","initialSlideHeight","currentSlide","firstSlide"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAC1D,MAAIA,YAAY,GAAG,CAAnB,EAAsB;AACpB,WAAOH,KAAK,CAACI,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6BI,KAAK,IAAI;AAC3C,aAAON,KAAK,CAACO,YAAN,CAAmBD,KAAnB,EAA0BA,KAAK,CAACE,KAAhC,CAAP;AACD,KAFM,CAAP;AAGD,GAJD,MAIO;AACL;AACA,WAAOR,KAAK,CAACI,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6BI,KAAK,IAAI;AAC3C,aAAON,KAAK,CAACO,YAAN,CAAmBD,KAAnB,EAA0BA,KAAK,CAACE,KAAhC,CAAP;AACD,KAFM,CAAP;AAGD;AACF,CAXM;AAaP,OAAO,MAAMC,gBAAgB,GAAGP,QAAQ,IAAI;AAC1C;AACA,SAAOF,KAAK,CAACI,QAAN,CAAeM,OAAf,CAAuBR,QAAvB,CAAP;AACD,CAHM;;AAKP,MAAMS,kBAAkB,GAAGC,MAAM,IAAI;AACnC,MAAIC,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAIF,MAAM,CAACE,CAAD,CAAN,CAAUE,YAAV,GAAyBH,SAA7B,EAAwC;AACtCA,MAAAA,SAAS,GAAGD,MAAM,CAACE,CAAD,CAAN,CAAUE,YAAtB;AACD;AACF;;AACD,SAAOH,SAAP;AACD,CARD;;AAUA,OAAO,MAAMI,cAAc,GAAG,CAACT,KAAD,EAAQU,KAAR,EAAeC,UAAU,GAAG,EAA5B,KAAmC;AAC/D,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAA+Cd,KAArD;AACA,QAAM;AAAEL,IAAAA,YAAF;AAAgBoB,IAAAA;AAAhB,MAAiCL,KAAvC;AACA,QAAMM,UAAU,GAAGL,UAAU,CAAC,CAAD,CAA7B;;AAEA,MAAIK,UAAU,IAAIJ,UAAU,KAAK,OAAjC,EAA0C;AACxC,WAAOC,QAAQ,GACXG,UAAU,CAACR,YAAX,GAA0Bb,YADf,GAEXqB,UAAU,CAACR,YAFf;AAGD;;AACD,MAAII,UAAU,KAAK,KAAnB,EAA0B;AACxB,WAAOT,kBAAkB,CAACQ,UAAD,CAAzB;AACD;;AACD,MAAIC,UAAU,KAAK,SAAnB,EAA8B;AAC5B,WAAOD,UAAU,CAACI,YAAD,CAAV,CAAyBP,YAAhC;AACD;;AACD,SAAOM,kBAAkB,IAAI,GAA7B;AACD,CAjBM","sourcesContent":["// eslint-disable-file\nimport React from 'react';\n\nexport const addAccessibility = (children, slidesToShow) => {\n  if (slidesToShow > 1) {\n    return React.Children.map(children, child => {\n      return React.cloneElement(child, child.props);\n    });\n  } else {\n    // when slidesToshow is 1\n    return React.Children.map(children, child => {\n      return React.cloneElement(child, child.props);\n    });\n  }\n};\n\nexport const getValidChildren = children => {\n  // .toArray automatically removes invalid React children\n  return React.Children.toArray(children);\n};\n\nconst findMaxHeightSlide = slides => {\n  let maxHeight = 0;\n  for (let i = 0; i < slides.length; i++) {\n    if (slides[i].offsetHeight > maxHeight) {\n      maxHeight = slides[i].offsetHeight;\n    }\n  }\n  return maxHeight;\n};\n\nexport const getSlideHeight = (props, state, childNodes = []) => {\n  const { heightMode, vertical, initialSlideHeight } = props;\n  const { slidesToShow, currentSlide } = state;\n  const firstSlide = childNodes[0];\n\n  if (firstSlide && heightMode === 'first') {\n    return vertical\n      ? firstSlide.offsetHeight * slidesToShow\n      : firstSlide.offsetHeight;\n  }\n  if (heightMode === 'max') {\n    return findMaxHeightSlide(childNodes);\n  }\n  if (heightMode === 'current') {\n    return childNodes[currentSlide].offsetHeight;\n  }\n  return initialSlideHeight || 100;\n};\n"]},"metadata":{},"sourceType":"module"}