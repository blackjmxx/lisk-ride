{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nrequire(\"./styles.css\");\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactSwipeable = require(\"react-swipeable\");\n\nvar _Slide = require(\"./Slide\");\n\nvar _Slide2 = _interopRequireDefault(_Slide);\n\nvar _Controller = require(\"./Controller\");\n\nvar _Controller2 = _interopRequireDefault(_Controller);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar IntroSlider = function IntroSlider(_ref) {\n  var sliderIsOpen = _ref.sliderIsOpen,\n      slides = _ref.slides,\n      imageStyle = _ref.imageStyle,\n      titleStyle = _ref.titleStyle,\n      descriptionStyle = _ref.descriptionStyle,\n      nextButton = _ref.nextButton,\n      skipButton = _ref.skipButton,\n      skipButtonStyle = _ref.skipButtonStyle,\n      nextButtonStyle = _ref.nextButtonStyle,\n      controllerOrientation = _ref.controllerOrientation,\n      controllerIconActiveStyle = _ref.controllerIconActiveStyle,\n      controllerIconInactiveStyle = _ref.controllerIconInactiveStyle,\n      sliderOverlayStyle = _ref.sliderOverlayStyle,\n      closeOnOverlayClick = _ref.closeOnOverlayClick,\n      sliderStyle = _ref.sliderStyle,\n      handeCloseFunction = _ref.handleClose,\n      handleDone = _ref.handleDone,\n      nextLabel = _ref.nextLabel,\n      skipLabel = _ref.skipLabel,\n      doneLabel = _ref.doneLabel,\n      controllerIconActive = _ref.controllerIconActive,\n      controllerIconInactive = _ref.controllerIconInactive,\n      slideStyle = _ref.slideStyle,\n      size = _ref.size;\n\n  var _useState = (0, _react.useState)(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeSlide = _useState2[0],\n      useActiveSlide = _useState2[1];\n\n  var sliderRef = _react2.default.createRef();\n\n  var handleClose = handeCloseFunction || function () {};\n\n  var documentClicked = function documentClicked(e) {\n    if (e.target === sliderRef.current || sliderRef.current.contains(e.target) || !closeOnOverlayClick) return;\n    handleClose();\n  };\n\n  (0, _react.useEffect)(function () {\n    document.addEventListener(\"click\", documentClicked, false);\n    return function () {\n      document.removeEventListener(\"click\", documentClicked, false);\n    };\n  }, []);\n\n  var handleLeftSwipe = function handleLeftSwipe() {\n    var newSlide = activeSlide + 1;\n\n    if (newSlide >= slides.length) {\n      newSlide = 0;\n    }\n\n    useActiveSlide(newSlide);\n  };\n\n  var handleRightSwipe = function handleRightSwipe() {\n    var newSlide = activeSlide - 1;\n\n    if (newSlide < 0) {\n      newSlide = slides.length - 1;\n    }\n\n    useActiveSlide(newSlide);\n  };\n\n  var nextSlide = function nextSlide() {\n    var newSlide = activeSlide + 1;\n\n    if (newSlide === slides.length) {\n      if (handleDone) {\n        handleDone();\n      }\n\n      handleClose();\n    } else {\n      useActiveSlide(newSlide);\n    }\n  };\n\n  var renderedSlides = slides.map(function (slide, index) {\n    var title = slide.title,\n        description = slide.description,\n        image = slide.image,\n        background = slide.background;\n    return _react2.default.createElement(_Slide2.default, {\n      active: index === activeSlide,\n      key: title,\n      title: title,\n      description: description,\n      image: image,\n      imageStyle: imageStyle,\n      titleStyle: titleStyle,\n      descriptionStyle: descriptionStyle,\n      background: background,\n      slideStyle: slideStyle\n    });\n  });\n  var containerSize = window.innerWidth < 400 ? \"fullscreen\" : size;\n  return sliderIsOpen && _react2.default.createElement(_reactSwipeable.Swipeable, {\n    onSwipedLeft: handleLeftSwipe,\n    onSwipedRight: handleRightSwipe\n  }, _react2.default.createElement(\"div\", {\n    className: \"ris-slider-overlay\",\n    style: sliderOverlayStyle\n  }, _react2.default.createElement(\"div\", {\n    className: \"ris-slider-container\"\n  }, _react2.default.createElement(\"div\", {\n    className: \"ris-slider ris-\" + containerSize,\n    style: sliderStyle,\n    ref: sliderRef\n  }, renderedSlides, _react2.default.createElement(_Controller2.default, {\n    slides: slides.length,\n    activeSlide: activeSlide,\n    nextButton: nextButton,\n    skipButton: skipButton,\n    skipButtonStyle: skipButtonStyle,\n    nextButtonStyle: nextButtonStyle,\n    nextSlide: nextSlide,\n    skipSlider: handleClose,\n    orientation: controllerOrientation,\n    controllerIconActiveStyle: controllerIconActiveStyle,\n    controllerIconInactiveStyle: controllerIconInactiveStyle,\n    nextLabel: nextLabel,\n    doneLabel: doneLabel,\n    skipLabel: skipLabel,\n    controllerIconActive: controllerIconActive,\n    controllerIconInactive: controllerIconInactive\n  })))));\n};\n\nIntroSlider.propTypes = {\n  sliderIsOpen: _propTypes2.default.bool,\n  descriptionStyle: _propTypes2.default.object,\n  titleStyle: _propTypes2.default.object,\n  imageStyle: _propTypes2.default.object,\n  slides: _propTypes2.default.array,\n  size: _propTypes2.default.string,\n  nextButton: _propTypes2.default.bool,\n  skipButton: _propTypes2.default.bool,\n  handleDone: _propTypes2.default.func,\n  skipButtonStyle: _propTypes2.default.object,\n  nextButtonStyle: _propTypes2.default.object,\n  controllerOrientation: _propTypes2.default.string,\n  sliderOverlayStyle: _propTypes2.default.object,\n  sliderStyle: _propTypes2.default.object,\n  handleClose: _propTypes2.default.func,\n  closeOnOverlayClick: _propTypes2.default.bool,\n  controllerIconActiveStyle: _propTypes2.default.object,\n  controllerIconInactiveStyle: _propTypes2.default.object,\n  nextLabel: _propTypes2.default.string,\n  skipLabel: _propTypes2.default.string,\n  doneLabel: _propTypes2.default.string,\n  controllerIconActive: _propTypes2.default.node,\n  contollerIconInactive: _propTypes2.default.node,\n  slideStyle: _propTypes2.default.object\n};\nIntroSlider.defaultProps = {\n  sliderIsOpen: false,\n  size: \"medium\",\n  slides: [],\n  sliderOverlayStyle: null,\n  sliderStyle: null,\n  slideStyle: null,\n  closeOnOverlayClick: true,\n  activeSlide: 0,\n  nextButton: true,\n  skipButton: false,\n  skipButtonStyle: null,\n  nextButtonStyle: null,\n  controllerOrientation: \"vertical\",\n  controllerIconActiveStyle: null,\n  controllerIconInactiveStyle: null,\n  descriptionStyle: null,\n  titleStyle: null,\n  imageStyle: null\n};\nexports.default = IntroSlider;","map":null,"metadata":{},"sourceType":"script"}