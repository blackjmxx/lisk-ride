{"ast":null,"code":"var _jsxFileName = \"/Users/blackjmxx/Devs/LiskRide/src/components/nuka-carousel/transitions/3d-scroll-transition.js\";\n// eslint-disable-file\nimport React from 'react';\nimport PropTypes from 'prop-types';\nconst MIN_ZOOM_SCALE = 0;\nconst MAX_ZOOM_SCALE = 1;\nexport default class ScrollTransition3D extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getListStyles = this.getListStyles.bind(this);\n  }\n\n  getSlideDirection(start, end, isWrapping) {\n    let direction = 0;\n    if (start === end) return direction;\n\n    if (isWrapping) {\n      direction = start < end ? -1 : 1;\n    } else {\n      direction = start < end ? 1 : -1;\n    }\n\n    return direction;\n  }\n  /* eslint-disable complexity */\n\n\n  getSlideTargetPosition(index) {\n    let targetPosition = 0;\n    let offset = 0;\n\n    if (index !== this.props.currentSlide) {\n      const relativeDistanceToCurrentSlide = this.getRelativeDistanceToCurrentSlide(index);\n      targetPosition = (this.props.slideWidth + this.props.cellSpacing) * relativeDistanceToCurrentSlide - this.getZoomOffsetFor(relativeDistanceToCurrentSlide);\n      offset = 0;\n\n      if (this.props.animation === 'zoom' && (this.props.currentSlide === index + 1 || this.props.currentSlide === 0 && index === this.props.children.length - 1)) {\n        offset = this.props.slideOffset;\n      } else if (this.props.animation === 'zoom' && (this.props.currentSlide === index - 1 || this.props.currentSlide === this.props.children.length - 1 && index === 0)) {\n        offset = -this.props.slideOffset;\n      }\n    }\n\n    return targetPosition + offset;\n  }\n  /* eslint-enable complexity */\n\n\n  formatChildren(children) {\n    const {\n      top,\n      left,\n      currentSlide,\n      slidesToShow\n    } = this.props;\n    const positionValue = this.props.vertical ? top : left;\n    return React.Children.map(children, (child, index) => {\n      const visible = this.getDistanceToCurrentSlide(index) <= slidesToShow / 2;\n      const current = currentSlide === index;\n      return /*#__PURE__*/React.createElement(\"li\", {\n        className: `slider-slide${visible ? ' slide-visible' : ''}${current ? ' slide-current' : ''}`,\n        style: this.getSlideStyles(index, positionValue),\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, child);\n    });\n  }\n\n  getZoomOffsetFor(relativeDistanceToCurrent) {\n    if (relativeDistanceToCurrent === 0) {\n      return 0;\n    }\n\n    const marginGeneratedByZoom = (1 - this.props.zoomScale ** Math.abs(relativeDistanceToCurrent)) * this.props.slideWidth;\n    const direction = relativeDistanceToCurrent < 0 ? -1 : 1;\n    const result = marginGeneratedByZoom * direction + this.getZoomOffsetFor(relativeDistanceToCurrent < 0 ? relativeDistanceToCurrent + 1 : relativeDistanceToCurrent - 1);\n    return result;\n  }\n\n  getDistance(index, referenceIndex) {\n    return Math.abs(index - referenceIndex);\n  }\n\n  getDistanceToCurrentSlide(index) {\n    return this.props.wrapAround ? Math.min(Math.min(this.getDistance(index, 0) + this.getDistance(this.props.currentSlide, this.props.slideCount), this.getDistance(index, this.props.slideCount) + this.getDistance(this.props.currentSlide, 0)), this.getDistance(index, this.props.currentSlide)) : this.getDistance(index, this.props.currentSlide);\n  }\n\n  getRelativeDistanceToCurrentSlide(index) {\n    if (this.props.wrapAround) {\n      const distanceByLeftEge = this.getDistance(index, 0) + this.getDistance(this.props.currentSlide, this.props.slideCount);\n      const distanceByRightEdge = this.getDistance(index, this.props.slideCount) + this.getDistance(this.props.currentSlide, 0);\n      const absoluteDirectDistance = this.getDistance(index, this.props.currentSlide);\n      const minimumDistance = Math.min(Math.min(distanceByLeftEge, distanceByRightEdge), absoluteDirectDistance);\n\n      switch (minimumDistance) {\n        case absoluteDirectDistance:\n          return index - this.props.currentSlide;\n\n        case distanceByLeftEge:\n          return distanceByLeftEge;\n\n        case distanceByRightEdge:\n          return -distanceByRightEdge;\n\n        default:\n          return 0;\n      }\n    } else {\n      return index - this.props.currentSlide;\n    }\n  }\n\n  getTransformScale(index) {\n    return this.props.currentSlide !== index ? Math.max(Math.min(this.props.zoomScale ** this.getDistanceToCurrentSlide(index), MAX_ZOOM_SCALE), MIN_ZOOM_SCALE) : 1.0;\n  }\n\n  getOpacityScale(index) {\n    return this.props.currentSlide !== index ? Math.max(Math.min(this.props.opacityScale ** this.getDistanceToCurrentSlide(index), MAX_ZOOM_SCALE), MIN_ZOOM_SCALE) : 1.0;\n  }\n\n  getSlideStyles(index, positionValue) {\n    const targetPosition = this.getSlideTargetPosition(index, positionValue);\n    const transformScale = this.getTransformScale(index);\n    return {\n      zIndex: this.props.slideCount - this.getDistanceToCurrentSlide(index),\n      boxSizing: 'border-box',\n      display: this.props.vertical ? 'block' : 'inline-block',\n      height: 'auto',\n      left: this.props.vertical ? 0 : targetPosition,\n      listStyleType: 'none',\n      marginBottom: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      marginLeft: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginRight: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginTop: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      MozBoxSizing: 'border-box',\n      position: 'absolute',\n      top: this.props.vertical ? targetPosition : 0,\n      transform: `scale(${transformScale})`,\n      transition: 'left 0.4s ease-out, transform 0.4s ease-out, opacity 0.4s ease-out',\n      verticalAlign: 'top',\n      width: this.props.vertical ? '100%' : this.props.slideWidth,\n      opacity: this.getOpacityScale(index)\n    };\n  }\n\n  getListStyles() {\n    const listWidth = this.props.slideWidth * React.Children.count(this.props.children);\n    const spacingOffset = this.props.cellSpacing * React.Children.count(this.props.children);\n    return {\n      left: `calc(50% - (${this.props.slideWidth}px / 2))`,\n      position: 'relative',\n      margin: this.props.vertical ? `${this.props.cellSpacing / 2 * -1}px 0px` : `${this.props.slideListMargin}px ${this.props.cellSpacing / 2 * -1}px`,\n      padding: 0,\n      height: this.props.vertical ? listWidth + spacingOffset : this.props.slideHeight,\n      width: this.props.vertical ? 'auto' : '100%',\n      cursor: this.props.dragging === true ? 'pointer' : 'inherit',\n      boxSizing: 'border-box',\n      MozBoxSizing: 'border-box',\n      touchAction: `pinch-zoom ${this.props.vertical ? 'pan-x' : 'pan-y'}`\n    };\n  }\n\n  render() {\n    const children = this.formatChildren(this.props.children);\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"slider-list\",\n      style: this.getListStyles(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n}\nScrollTransition3D.propTypes = {\n  cellSpacing: PropTypes.number,\n  currentSlide: PropTypes.number,\n  dragging: PropTypes.bool,\n  isWrappingAround: PropTypes.bool,\n  left: PropTypes.number,\n  slideCount: PropTypes.number,\n  slideHeight: PropTypes.number,\n  slideOffset: PropTypes.number,\n  slideWidth: PropTypes.number,\n  top: PropTypes.number,\n  vertical: PropTypes.bool,\n  wrapAround: PropTypes.bool,\n  zoomScale: PropTypes.number,\n  opacityScale: PropTypes.number,\n  slidesToShow: PropTypes.number,\n  slideListMargin: PropTypes.number\n};\nScrollTransition3D.defaultProps = {\n  cellSpacing: 0,\n  currentSlide: 0,\n  dragging: false,\n  isWrappingAround: false,\n  left: 0,\n  slideCount: 0,\n  slideHeight: 0,\n  slideWidth: 0,\n  top: 0,\n  vertical: false,\n  wrapAround: true,\n  zoomScale: 0.75,\n  opacityScale: 0.65,\n  slidesToShow: 3,\n  slideListMargin: 10\n};","map":{"version":3,"sources":["/Users/blackjmxx/Devs/LiskRide/src/components/nuka-carousel/transitions/3d-scroll-transition.js"],"names":["React","PropTypes","MIN_ZOOM_SCALE","MAX_ZOOM_SCALE","ScrollTransition3D","Component","constructor","props","getListStyles","bind","getSlideDirection","start","end","isWrapping","direction","getSlideTargetPosition","index","targetPosition","offset","currentSlide","relativeDistanceToCurrentSlide","getRelativeDistanceToCurrentSlide","slideWidth","cellSpacing","getZoomOffsetFor","animation","children","length","slideOffset","formatChildren","top","left","slidesToShow","positionValue","vertical","Children","map","child","visible","getDistanceToCurrentSlide","current","getSlideStyles","relativeDistanceToCurrent","marginGeneratedByZoom","zoomScale","Math","abs","result","getDistance","referenceIndex","wrapAround","min","slideCount","distanceByLeftEge","distanceByRightEdge","absoluteDirectDistance","minimumDistance","getTransformScale","max","getOpacityScale","opacityScale","transformScale","zIndex","boxSizing","display","height","listStyleType","marginBottom","marginLeft","marginRight","marginTop","MozBoxSizing","position","transform","transition","verticalAlign","width","opacity","listWidth","count","spacingOffset","margin","slideListMargin","padding","slideHeight","cursor","dragging","touchAction","render","propTypes","number","bool","isWrappingAround","defaultProps"],"mappings":"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","sourcesContent":["// eslint-disable-file\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MIN_ZOOM_SCALE = 0;\nconst MAX_ZOOM_SCALE = 1;\n\nexport default class ScrollTransition3D extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getListStyles = this.getListStyles.bind(this);\n  }\n\n  getSlideDirection(start, end, isWrapping) {\n    let direction = 0;\n    if (start === end) return direction;\n\n    if (isWrapping) {\n      direction = start < end ? -1 : 1;\n    } else {\n      direction = start < end ? 1 : -1;\n    }\n\n    return direction;\n  }\n\n  /* eslint-disable complexity */\n  getSlideTargetPosition(index) {\n    let targetPosition = 0;\n    let offset = 0;\n    if (index !== this.props.currentSlide) {\n      const relativeDistanceToCurrentSlide = this.getRelativeDistanceToCurrentSlide(\n        index\n      );\n      targetPosition =\n        (this.props.slideWidth + this.props.cellSpacing) *\n          relativeDistanceToCurrentSlide -\n        this.getZoomOffsetFor(relativeDistanceToCurrentSlide);\n\n      offset = 0;\n\n      if (\n        this.props.animation === 'zoom' &&\n        (this.props.currentSlide === index + 1 ||\n          (this.props.currentSlide === 0 &&\n            index === this.props.children.length - 1))\n      ) {\n        offset = this.props.slideOffset;\n      } else if (\n        this.props.animation === 'zoom' &&\n        (this.props.currentSlide === index - 1 ||\n          (this.props.currentSlide === this.props.children.length - 1 &&\n            index === 0))\n      ) {\n        offset = -this.props.slideOffset;\n      }\n    }\n    return targetPosition + offset;\n  }\n  /* eslint-enable complexity */\n\n  formatChildren(children) {\n    const { top, left, currentSlide, slidesToShow } = this.props;\n    const positionValue = this.props.vertical ? top : left;\n    return React.Children.map(children, (child, index) => {\n      const visible = this.getDistanceToCurrentSlide(index) <= slidesToShow / 2;\n      const current = currentSlide === index;\n      return (\n        <li\n          className={`slider-slide${visible ? ' slide-visible' : ''}${\n            current ? ' slide-current' : ''\n          }`}\n          style={this.getSlideStyles(index, positionValue)}\n          key={index}\n        >\n          {child}\n        </li>\n      );\n    });\n  }\n\n  getZoomOffsetFor(relativeDistanceToCurrent) {\n    if (relativeDistanceToCurrent === 0) {\n      return 0;\n    }\n    const marginGeneratedByZoom =\n      (1 - this.props.zoomScale ** Math.abs(relativeDistanceToCurrent)) *\n      this.props.slideWidth;\n    const direction = relativeDistanceToCurrent < 0 ? -1 : 1;\n    const result =\n      marginGeneratedByZoom * direction +\n      this.getZoomOffsetFor(\n        relativeDistanceToCurrent < 0\n          ? relativeDistanceToCurrent + 1\n          : relativeDistanceToCurrent - 1\n      );\n    return result;\n  }\n\n  getDistance(index, referenceIndex) {\n    return Math.abs(index - referenceIndex);\n  }\n\n  getDistanceToCurrentSlide(index) {\n    return this.props.wrapAround\n      ? Math.min(\n          Math.min(\n            this.getDistance(index, 0) +\n              this.getDistance(this.props.currentSlide, this.props.slideCount),\n            this.getDistance(index, this.props.slideCount) +\n              this.getDistance(this.props.currentSlide, 0)\n          ),\n          this.getDistance(index, this.props.currentSlide)\n        )\n      : this.getDistance(index, this.props.currentSlide);\n  }\n\n  getRelativeDistanceToCurrentSlide(index) {\n    if (this.props.wrapAround) {\n      const distanceByLeftEge =\n        this.getDistance(index, 0) +\n        this.getDistance(this.props.currentSlide, this.props.slideCount);\n      const distanceByRightEdge =\n        this.getDistance(index, this.props.slideCount) +\n        this.getDistance(this.props.currentSlide, 0);\n      const absoluteDirectDistance = this.getDistance(\n        index,\n        this.props.currentSlide\n      );\n\n      const minimumDistance = Math.min(\n        Math.min(distanceByLeftEge, distanceByRightEdge),\n        absoluteDirectDistance\n      );\n\n      switch (minimumDistance) {\n        case absoluteDirectDistance:\n          return index - this.props.currentSlide;\n        case distanceByLeftEge:\n          return distanceByLeftEge;\n        case distanceByRightEdge:\n          return -distanceByRightEdge;\n        default:\n          return 0;\n      }\n    } else {\n      return index - this.props.currentSlide;\n    }\n  }\n\n  getTransformScale(index) {\n    return this.props.currentSlide !== index\n      ? Math.max(\n          Math.min(\n            this.props.zoomScale ** this.getDistanceToCurrentSlide(index),\n            MAX_ZOOM_SCALE\n          ),\n          MIN_ZOOM_SCALE\n        )\n      : 1.0;\n  }\n\n  getOpacityScale(index) {\n    return this.props.currentSlide !== index\n      ? Math.max(\n          Math.min(\n            this.props.opacityScale ** this.getDistanceToCurrentSlide(index),\n            MAX_ZOOM_SCALE\n          ),\n          MIN_ZOOM_SCALE\n        )\n      : 1.0;\n  }\n\n  getSlideStyles(index, positionValue) {\n    const targetPosition = this.getSlideTargetPosition(index, positionValue);\n    const transformScale = this.getTransformScale(index);\n    return {\n      zIndex: this.props.slideCount - this.getDistanceToCurrentSlide(index),\n      boxSizing: 'border-box',\n      display: this.props.vertical ? 'block' : 'inline-block',\n      height: 'auto',\n      left: this.props.vertical ? 0 : targetPosition,\n      listStyleType: 'none',\n      marginBottom: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      marginLeft: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginRight: this.props.vertical ? 'auto' : this.props.cellSpacing / 2,\n      marginTop: this.props.vertical ? this.props.cellSpacing / 2 : 'auto',\n      MozBoxSizing: 'border-box',\n      position: 'absolute',\n      top: this.props.vertical ? targetPosition : 0,\n      transform: `scale(${transformScale})`,\n      transition:\n        'left 0.4s ease-out, transform 0.4s ease-out, opacity 0.4s ease-out',\n      verticalAlign: 'top',\n      width: this.props.vertical ? '100%' : this.props.slideWidth,\n      opacity: this.getOpacityScale(index)\n    };\n  }\n\n  getListStyles() {\n    const listWidth =\n      this.props.slideWidth * React.Children.count(this.props.children);\n    const spacingOffset =\n      this.props.cellSpacing * React.Children.count(this.props.children);\n    return {\n      left: `calc(50% - (${this.props.slideWidth}px / 2))`,\n      position: 'relative',\n      margin: this.props.vertical\n        ? `${(this.props.cellSpacing / 2) * -1}px 0px`\n        : `${this.props.slideListMargin}px ${(this.props.cellSpacing / 2) *\n            -1}px`,\n      padding: 0,\n      height: this.props.vertical\n        ? listWidth + spacingOffset\n        : this.props.slideHeight,\n      width: this.props.vertical ? 'auto' : '100%',\n      cursor: this.props.dragging === true ? 'pointer' : 'inherit',\n      boxSizing: 'border-box',\n      MozBoxSizing: 'border-box',\n      touchAction: `pinch-zoom ${this.props.vertical ? 'pan-x' : 'pan-y'}`\n    };\n  }\n\n  render() {\n    const children = this.formatChildren(this.props.children);\n    return (\n      <ul className=\"slider-list\" style={this.getListStyles()}>\n        {children}\n      </ul>\n    );\n  }\n}\n\nScrollTransition3D.propTypes = {\n  cellSpacing: PropTypes.number,\n  currentSlide: PropTypes.number,\n  dragging: PropTypes.bool,\n  isWrappingAround: PropTypes.bool,\n  left: PropTypes.number,\n  slideCount: PropTypes.number,\n  slideHeight: PropTypes.number,\n  slideOffset: PropTypes.number,\n  slideWidth: PropTypes.number,\n  top: PropTypes.number,\n  vertical: PropTypes.bool,\n  wrapAround: PropTypes.bool,\n  zoomScale: PropTypes.number,\n  opacityScale: PropTypes.number,\n  slidesToShow: PropTypes.number,\n  slideListMargin: PropTypes.number\n};\n\nScrollTransition3D.defaultProps = {\n  cellSpacing: 0,\n  currentSlide: 0,\n  dragging: false,\n  isWrappingAround: false,\n  left: 0,\n  slideCount: 0,\n  slideHeight: 0,\n  slideWidth: 0,\n  top: 0,\n  vertical: false,\n  wrapAround: true,\n  zoomScale: 0.75,\n  opacityScale: 0.65,\n  slidesToShow: 3,\n  slideListMargin: 10\n};\n"]},"metadata":{},"sourceType":"module"}