{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _from = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/from\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _startsWith = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/starts-with\"));\n\nvar _keys3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/set\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Provides a local datastore which can be used to store and retrieve <code>Parse.Object</code>. <br />\n * To enable this functionality, call <code>Parse.enableLocalDatastore()</code>.\n *\n * Pin object to add to local datastore\n *\n * <pre>await object.pin();</pre>\n * <pre>await object.pinWithName('pinName');</pre>\n *\n * Query pinned objects\n *\n * <pre>query.fromLocalDatastore();</pre>\n * <pre>query.fromPin();</pre>\n * <pre>query.fromPinWithName();</pre>\n *\n * <pre>const localObjects = await query.find();</pre>\n *\n * @class Parse.LocalDatastore\n * @static\n */\n\n\nvar LocalDatastore = {\n  isEnabled: false,\n  isSyncing: false,\n  fromPinWithName: function (name\n  /*: string*/\n  )\n  /*: Promise<Array<Object>>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.fromPinWithName(name);\n  },\n  pinWithName: function (name\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.pinWithName(name, value);\n  },\n  unPinWithName: function (name\n  /*: string*/\n  )\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.unPinWithName(name);\n  },\n  _getAllContents: function ()\n  /*: Promise<Object>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getAllContents();\n  },\n  // Use for testing\n  _getRawStorage: function ()\n  /*: Promise<Object>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getRawStorage();\n  },\n  _clear: function ()\n  /*: Promise<void>*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.clear();\n  },\n  // Pin the object and children recursively\n  // Saves the object and children key to Pin Name\n  _handlePinAllWithName: function (name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  ) {\n    var _context;\n\n    var pinName, toPinPromises, objectKeys, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, parent, children, parentKey, json, objectKey, fromPinPromise, _ref, _ref2, pinned, toPin;\n\n    return _regenerator.default.async(function (_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            pinName = this.getPinName(name);\n            toPinPromises = [];\n            objectKeys = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context2.prev = 6;\n\n            for (_iterator = (0, _getIterator2.default)(objects); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              parent = _step.value;\n              children = this._getChildren(parent);\n              parentKey = this.getKeyForObject(parent);\n              json = parent._toFullJSON();\n\n              if (parent._localId) {\n                json._localId = parent._localId;\n              }\n\n              children[parentKey] = json;\n\n              for (objectKey in children) {\n                objectKeys.push(objectKey);\n                toPinPromises.push(this.pinWithName(objectKey, [children[objectKey]]));\n              }\n            }\n\n            _context2.next = 14;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.prev = 15;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 17:\n            _context2.prev = 17;\n\n            if (!_didIteratorError) {\n              _context2.next = 20;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 20:\n            return _context2.finish(17);\n\n          case 21:\n            return _context2.finish(14);\n\n          case 22:\n            fromPinPromise = this.fromPinWithName(pinName);\n            _context2.next = 25;\n            return _regenerator.default.awrap(_promise.default.all([fromPinPromise, toPinPromises]));\n\n          case 25:\n            _ref = _context2.sent;\n            _ref2 = (0, _slicedToArray2.default)(_ref, 1);\n            pinned = _ref2[0];\n            toPin = (0, _toConsumableArray2.default)(new _set.default((0, _concat.default)(_context = []).call(_context, (0, _toConsumableArray2.default)(pinned || []), objectKeys)));\n            return _context2.abrupt(\"return\", this.pinWithName(pinName, toPin));\n\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this, [[6, 10, 14, 22], [15,, 17, 21]]);\n  },\n  // Removes object and children keys from pin name\n  // Keeps the object and children pinned\n  _handleUnPinAllWithName: function (name\n  /*: string*/\n  , objects\n  /*: Array<ParseObject>*/\n  ) {\n    var localDatastore, pinName, promises, objectKeys, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _objectKeys, _context3, parent, children, parentKey, pinned, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, objectKey, hasReference, key, pinnedObjects;\n\n    return _regenerator.default.async(function (_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regenerator.default.awrap(this._getAllContents());\n\n          case 2:\n            localDatastore = _context4.sent;\n            pinName = this.getPinName(name);\n            promises = [];\n            objectKeys = [];\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _iteratorError2 = undefined;\n            _context4.prev = 9;\n\n            for (_iterator2 = (0, _getIterator2.default)(objects); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              parent = _step2.value;\n              children = this._getChildren(parent);\n              parentKey = this.getKeyForObject(parent);\n\n              (_objectKeys = objectKeys).push.apply(_objectKeys, (0, _concat.default)(_context3 = [parentKey]).call(_context3, (0, _toConsumableArray2.default)((0, _keys3.default)(children))));\n            }\n\n            _context4.next = 17;\n            break;\n\n          case 13:\n            _context4.prev = 13;\n            _context4.t0 = _context4[\"catch\"](9);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context4.t0;\n\n          case 17:\n            _context4.prev = 17;\n            _context4.prev = 18;\n\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n\n          case 20:\n            _context4.prev = 20;\n\n            if (!_didIteratorError2) {\n              _context4.next = 23;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 23:\n            return _context4.finish(20);\n\n          case 24:\n            return _context4.finish(17);\n\n          case 25:\n            objectKeys = (0, _toConsumableArray2.default)(new _set.default(objectKeys));\n            pinned = localDatastore[pinName] || [];\n            pinned = (0, _filter.default)(pinned).call(pinned, function (item) {\n              return !(0, _includes.default)(objectKeys).call(objectKeys, item);\n            });\n\n            if (pinned.length == 0) {\n              promises.push(this.unPinWithName(pinName));\n              delete localDatastore[pinName];\n            } else {\n              promises.push(this.pinWithName(pinName, pinned));\n              localDatastore[pinName] = pinned;\n            }\n\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _iteratorError3 = undefined;\n            _context4.prev = 32;\n            _iterator3 = (0, _getIterator2.default)(objectKeys);\n\n          case 34:\n            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n              _context4.next = 51;\n              break;\n            }\n\n            objectKey = _step3.value;\n            hasReference = false;\n            _context4.t1 = (0, _keys2.default)(_regenerator.default).call(_regenerator.default, localDatastore);\n\n          case 38:\n            if ((_context4.t2 = _context4.t1()).done) {\n              _context4.next = 47;\n              break;\n            }\n\n            key = _context4.t2.value;\n\n            if (!(key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX))) {\n              _context4.next = 45;\n              break;\n            }\n\n            pinnedObjects = localDatastore[key] || [];\n\n            if (!(0, _includes.default)(pinnedObjects).call(pinnedObjects, objectKey)) {\n              _context4.next = 45;\n              break;\n            }\n\n            hasReference = true;\n            return _context4.abrupt(\"break\", 47);\n\n          case 45:\n            _context4.next = 38;\n            break;\n\n          case 47:\n            if (!hasReference) {\n              promises.push(this.unPinWithName(objectKey));\n            }\n\n          case 48:\n            _iteratorNormalCompletion3 = true;\n            _context4.next = 34;\n            break;\n\n          case 51:\n            _context4.next = 57;\n            break;\n\n          case 53:\n            _context4.prev = 53;\n            _context4.t3 = _context4[\"catch\"](32);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context4.t3;\n\n          case 57:\n            _context4.prev = 57;\n            _context4.prev = 58;\n\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n\n          case 60:\n            _context4.prev = 60;\n\n            if (!_didIteratorError3) {\n              _context4.next = 63;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 63:\n            return _context4.finish(60);\n\n          case 64:\n            return _context4.finish(57);\n\n          case 65:\n            return _context4.abrupt(\"return\", _promise.default.all(promises));\n\n          case 66:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, this, [[9, 13, 17, 25], [18,, 20, 24], [32, 53, 57, 65], [58,, 60, 64]]);\n  },\n  // Retrieve all pointer fields from object recursively\n  _getChildren: function (object\n  /*: ParseObject*/\n  ) {\n    var encountered = {};\n\n    var json = object._toFullJSON();\n\n    for (var key in json) {\n      if (json[key] && json[key].__type && json[key].__type === 'Object') {\n        this._traverse(json[key], encountered);\n      }\n    }\n\n    return encountered;\n  },\n  _traverse: function (object\n  /*: any*/\n  , encountered\n  /*: any*/\n  ) {\n    if (!object.objectId) {\n      return;\n    } else {\n      var objectKey = this.getKeyForObject(object);\n\n      if (encountered[objectKey]) {\n        return;\n      }\n\n      encountered[objectKey] = object;\n    }\n\n    for (var key in object) {\n      var json = object[key];\n\n      if (!object[key]) {\n        json = object;\n      }\n\n      if (json.__type && json.__type === 'Object') {\n        this._traverse(json, encountered);\n      }\n    }\n  },\n  // Transform keys in pin name to objects\n  _serializeObjectsFromPinName: function (name\n  /*: string*/\n  ) {\n    var _this = this,\n        _context5,\n        _concatInstanceProper,\n        _context6;\n\n    var localDatastore, allObjects, key, pinName, pinned, promises, objects;\n    return _regenerator.default.async(function (_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regenerator.default.awrap(this._getAllContents());\n\n          case 2:\n            localDatastore = _context7.sent;\n            allObjects = [];\n\n            for (key in localDatastore) {\n              if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n                allObjects.push(localDatastore[key][0]);\n              }\n            }\n\n            if (name) {\n              _context7.next = 7;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", allObjects);\n\n          case 7:\n            pinName = this.getPinName(name);\n            pinned = localDatastore[pinName];\n\n            if ((0, _isArray.default)(pinned)) {\n              _context7.next = 11;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", []);\n\n          case 11:\n            promises = (0, _map.default)(pinned).call(pinned, function (objectKey) {\n              return _this.fromPinWithName(objectKey);\n            });\n            _context7.next = 14;\n            return _regenerator.default.awrap(_promise.default.all(promises));\n\n          case 14:\n            objects = _context7.sent;\n            objects = (_concatInstanceProper = (0, _concat.default)(_context5 = [])).call.apply(_concatInstanceProper, (0, _concat.default)(_context6 = [_context5]).call(_context6, (0, _toConsumableArray2.default)(objects)));\n            return _context7.abrupt(\"return\", (0, _filter.default)(objects).call(objects, function (object) {\n              return object != null;\n            }));\n\n          case 17:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, this);\n  },\n  // Replaces object pointers with pinned pointers\n  // The object pointers may contain old data\n  // Uses Breadth First Search Algorithm\n  _serializeObject: function (objectKey\n  /*: string*/\n  , localDatastore\n  /*: any*/\n  ) {\n    var LDS, root, queue, meta, uniqueId, nodeId, subTreeRoot, field, value, key, pointer;\n    return _regenerator.default.async(function (_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            LDS = localDatastore;\n\n            if (LDS) {\n              _context8.next = 5;\n              break;\n            }\n\n            _context8.next = 4;\n            return _regenerator.default.awrap(this._getAllContents());\n\n          case 4:\n            LDS = _context8.sent;\n\n          case 5:\n            if (!(!LDS[objectKey] || LDS[objectKey].length === 0)) {\n              _context8.next = 7;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", null);\n\n          case 7:\n            root = LDS[objectKey][0];\n            queue = [];\n            meta = {};\n            uniqueId = 0;\n            meta[uniqueId] = root;\n            queue.push(uniqueId);\n\n            while (queue.length !== 0) {\n              nodeId = queue.shift();\n              subTreeRoot = meta[nodeId];\n\n              for (field in subTreeRoot) {\n                value = subTreeRoot[field];\n\n                if (value.__type && value.__type === 'Object') {\n                  key = this.getKeyForObject(value);\n\n                  if (LDS[key] && LDS[key].length > 0) {\n                    pointer = LDS[key][0];\n                    uniqueId++;\n                    meta[uniqueId] = pointer;\n                    subTreeRoot[field] = pointer;\n                    queue.push(uniqueId);\n                  }\n                }\n              }\n            }\n\n            return _context8.abrupt(\"return\", root);\n\n          case 15:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, this);\n  },\n  // Called when an object is save / fetched\n  // Update object pin value\n  _updateObjectIfPinned: function (object\n  /*: ParseObject*/\n  ) {\n    var objectKey, pinned;\n    return _regenerator.default.async(function (_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (this.isEnabled) {\n              _context9.next = 2;\n              break;\n            }\n\n            return _context9.abrupt(\"return\");\n\n          case 2:\n            objectKey = this.getKeyForObject(object);\n            _context9.next = 5;\n            return _regenerator.default.awrap(this.fromPinWithName(objectKey));\n\n          case 5:\n            pinned = _context9.sent;\n\n            if (!(!pinned || pinned.length === 0)) {\n              _context9.next = 8;\n              break;\n            }\n\n            return _context9.abrupt(\"return\");\n\n          case 8:\n            return _context9.abrupt(\"return\", this.pinWithName(objectKey, [object._toFullJSON()]));\n\n          case 9:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, this);\n  },\n  // Called when object is destroyed\n  // Unpin object and remove all references from pin names\n  // TODO: Destroy children?\n  _destroyObjectIfPinned: function (object\n  /*: ParseObject*/\n  ) {\n    var localDatastore, objectKey, pin, promises, key, pinned;\n    return _regenerator.default.async(function (_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            if (this.isEnabled) {\n              _context10.next = 2;\n              break;\n            }\n\n            return _context10.abrupt(\"return\");\n\n          case 2:\n            _context10.next = 4;\n            return _regenerator.default.awrap(this._getAllContents());\n\n          case 4:\n            localDatastore = _context10.sent;\n            objectKey = this.getKeyForObject(object);\n            pin = localDatastore[objectKey];\n\n            if (pin) {\n              _context10.next = 9;\n              break;\n            }\n\n            return _context10.abrupt(\"return\");\n\n          case 9:\n            promises = [this.unPinWithName(objectKey)];\n            delete localDatastore[objectKey];\n\n            for (key in localDatastore) {\n              if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n                pinned = localDatastore[key] || [];\n\n                if ((0, _includes.default)(pinned).call(pinned, objectKey)) {\n                  pinned = (0, _filter.default)(pinned).call(pinned, function (item) {\n                    return item !== objectKey;\n                  });\n\n                  if (pinned.length == 0) {\n                    promises.push(this.unPinWithName(key));\n                    delete localDatastore[key];\n                  } else {\n                    promises.push(this.pinWithName(key, pinned));\n                    localDatastore[key] = pinned;\n                  }\n                }\n              }\n            }\n\n            return _context10.abrupt(\"return\", _promise.default.all(promises));\n\n          case 13:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, this);\n  },\n  // Update pin and references of the unsaved object\n  _updateLocalIdForObject: function (localId\n  /*: string*/\n  , object\n  /*: ParseObject*/\n  ) {\n    var _context11, _context12;\n\n    var localKey, objectKey, unsaved, promises, localDatastore, key, pinned;\n    return _regenerator.default.async(function (_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            if (this.isEnabled) {\n              _context13.next = 2;\n              break;\n            }\n\n            return _context13.abrupt(\"return\");\n\n          case 2:\n            localKey = (0, _concat.default)(_context11 = (0, _concat.default)(_context12 = \"\".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context12, object.className, \"_\")).call(_context11, localId);\n            objectKey = this.getKeyForObject(object);\n            _context13.next = 6;\n            return _regenerator.default.awrap(this.fromPinWithName(localKey));\n\n          case 6:\n            unsaved = _context13.sent;\n\n            if (!(!unsaved || unsaved.length === 0)) {\n              _context13.next = 9;\n              break;\n            }\n\n            return _context13.abrupt(\"return\");\n\n          case 9:\n            promises = [this.unPinWithName(localKey), this.pinWithName(objectKey, unsaved)];\n            _context13.next = 12;\n            return _regenerator.default.awrap(this._getAllContents());\n\n          case 12:\n            localDatastore = _context13.sent;\n\n            for (key in localDatastore) {\n              if (key === _LocalDatastoreUtils.DEFAULT_PIN || (0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.PIN_PREFIX)) {\n                pinned = localDatastore[key] || [];\n\n                if ((0, _includes.default)(pinned).call(pinned, localKey)) {\n                  pinned = (0, _filter.default)(pinned).call(pinned, function (item) {\n                    return item !== localKey;\n                  });\n                  pinned.push(objectKey);\n                  promises.push(this.pinWithName(key, pinned));\n                  localDatastore[key] = pinned;\n                }\n              }\n            }\n\n            return _context13.abrupt(\"return\", _promise.default.all(promises));\n\n          case 15:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, this);\n  },\n\n  /**\n   * Updates Local Datastore from Server\n   *\n   * <pre>\n   * await Parse.LocalDatastore.updateFromServer();\n   * </pre>\n   * @method updateFromServer\n   * @name Parse.LocalDatastore.updateFromServer\n   * @static\n   */\n  updateFromServer: function () {\n    var _context14,\n        _this2 = this;\n\n    var localDatastore, keys, key, pointersHash, _i, _keys, _key, _key$split, _key$split2, className, objectId, queryPromises, responses, objects, pinPromises;\n\n    return _regenerator.default.async(function (_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            if (!(!this.checkIfEnabled() || this.isSyncing)) {\n              _context15.next = 2;\n              break;\n            }\n\n            return _context15.abrupt(\"return\");\n\n          case 2:\n            _context15.next = 4;\n            return _regenerator.default.awrap(this._getAllContents());\n\n          case 4:\n            localDatastore = _context15.sent;\n            keys = [];\n\n            for (key in localDatastore) {\n              if ((0, _startsWith.default)(key).call(key, _LocalDatastoreUtils.OBJECT_PREFIX)) {\n                keys.push(key);\n              }\n            }\n\n            if (!(keys.length === 0)) {\n              _context15.next = 9;\n              break;\n            }\n\n            return _context15.abrupt(\"return\");\n\n          case 9:\n            this.isSyncing = true;\n            pointersHash = {};\n            _i = 0, _keys = keys;\n\n          case 12:\n            if (!(_i < _keys.length)) {\n              _context15.next = 23;\n              break;\n            }\n\n            _key = _keys[_i]; // Ignore the OBJECT_PREFIX\n\n            _key$split = _key.split('_'), _key$split2 = (0, _slicedToArray2.default)(_key$split, 4), className = _key$split2[2], objectId = _key$split2[3]; // User key is split into [ 'Parse', 'LDS', '', 'User', 'objectId' ]\n\n            if (_key.split('_').length === 5 && _key.split('_')[3] === 'User') {\n              className = '_User';\n              objectId = _key.split('_')[4];\n            }\n\n            if (!(0, _startsWith.default)(objectId).call(objectId, 'local')) {\n              _context15.next = 18;\n              break;\n            }\n\n            return _context15.abrupt(\"continue\", 20);\n\n          case 18:\n            if (!(className in pointersHash)) {\n              pointersHash[className] = new _set.default();\n            }\n\n            pointersHash[className].add(objectId);\n\n          case 20:\n            _i++;\n            _context15.next = 12;\n            break;\n\n          case 23:\n            queryPromises = (0, _map.default)(_context14 = (0, _keys3.default)(pointersHash)).call(_context14, function (className) {\n              var objectIds = (0, _from.default)(pointersHash[className]);\n              var query = new _ParseQuery.default(className);\n              query.limit(objectIds.length);\n\n              if (objectIds.length === 1) {\n                query.equalTo('objectId', objectIds[0]);\n              } else {\n                query.containedIn('objectId', objectIds);\n              }\n\n              return (0, _find.default)(query).call(query);\n            });\n            _context15.prev = 24;\n            _context15.next = 27;\n            return _regenerator.default.awrap(_promise.default.all(queryPromises));\n\n          case 27:\n            responses = _context15.sent;\n            objects = (0, _concat.default)([]).apply([], responses);\n            pinPromises = (0, _map.default)(objects).call(objects, function (object) {\n              var objectKey = _this2.getKeyForObject(object);\n\n              return _this2.pinWithName(objectKey, object._toFullJSON());\n            });\n            _context15.next = 32;\n            return _regenerator.default.awrap(_promise.default.all(pinPromises));\n\n          case 32:\n            this.isSyncing = false;\n            _context15.next = 39;\n            break;\n\n          case 35:\n            _context15.prev = 35;\n            _context15.t0 = _context15[\"catch\"](24);\n            console.error('Error syncing LocalDatastore: ', _context15.t0);\n            this.isSyncing = false;\n\n          case 39:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, this, [[24, 35]]);\n  },\n  getKeyForObject: function (object\n  /*: any*/\n  ) {\n    var _context16, _context17;\n\n    var objectId = object.objectId || object._getId();\n\n    return (0, _concat.default)(_context16 = (0, _concat.default)(_context17 = \"\".concat(_LocalDatastoreUtils.OBJECT_PREFIX)).call(_context17, object.className, \"_\")).call(_context16, objectId);\n  },\n  getPinName: function (pinName\n  /*: ?string*/\n  ) {\n    if (!pinName || pinName === _LocalDatastoreUtils.DEFAULT_PIN) {\n      return _LocalDatastoreUtils.DEFAULT_PIN;\n    }\n\n    return _LocalDatastoreUtils.PIN_PREFIX + pinName;\n  },\n  checkIfEnabled: function () {\n    if (!this.isEnabled) {\n      console.error('Parse.enableLocalDatastore() must be called first');\n    }\n\n    return this.isEnabled;\n  }\n};\nmodule.exports = LocalDatastore;\n\n_CoreManager.default.setLocalDatastoreController(require('./LocalDatastoreController'));\n\n_CoreManager.default.setLocalDatastore(LocalDatastore);","map":null,"metadata":{},"sourceType":"script"}