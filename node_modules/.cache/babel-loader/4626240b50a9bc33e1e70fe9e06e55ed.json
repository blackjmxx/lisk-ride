{"ast":null,"code":"var _jsxFileName = \"/Users/blackjmxx/Devs/LiskRide/src/components/StampCardDetails/StampCardDetails.js\";\nimport React from \"react\";\nimport { Loader, Dimmer } from \"semantic-ui-react\";\nimport { buildStyles, CircularProgressbar } from \"react-circular-progressbar\";\nimport RewardsRow from '../RewardsRow/RewardsRow';\nimport ProgressProvider from '../ProgressProvider';\nimport './styles/style.scss';\nimport { NextRewardImage, CurrentStepContent, CurrentStepContainer, CurrentStepContentActive, Subtitle } from \"../CardAvatar/styles\";\nimport { SampCardDetailsContainer, SampCardDetailsCenterContainer, ProgressBarContainer, CenterContainer } from \"./styles\";\n\nconst StampCardDetails = ({\n  totalStepCount = 0,\n  currentStepCount = 0,\n  stamps,\n  rewardSteps,\n  nextRewardStep = 0\n}) => {\n  if (currentStepCount === null || currentStepCount === undefined || totalStepCount === 0 || totalStepCount === null || totalStepCount === undefined) {\n    return /*#__PURE__*/React.createElement(Dimmer, {\n      page: true,\n      active: true,\n      inverted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      indeterminate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, \"Chargement\"));\n  }\n\n  let percentage = currentStepCount * 100 / totalStepCount;\n  return /*#__PURE__*/React.createElement(CenterContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ProgressBarContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ProgressProvider, {\n    valueStart: 0,\n    valueEnd: percentage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }, value => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CircularProgressbar, {\n    value: value,\n    strokeWidth: 5,\n    circleRatio: 0.75,\n    styles: buildStyles({\n      rotation: 1 / 2 + 1 / 8,\n      pathTransitionDuration: 2,\n      strokeLinecap: 'round'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CurrentStep, {\n    value: currentStepCount,\n    maxValue: totalStepCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(NextRewardImage, {\n    src: require('../../assets/images/present.svg'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(SampCardDetailsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SampCardDetailsCenterContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Subtitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Plus que\", \" \", nextRewardStep, \" tampons avant votre\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }), \"prochaine surprise!\")), /*#__PURE__*/React.createElement(RewardsRow, {\n    stamps: stamps,\n    rewardSteps: rewardSteps,\n    maxStepCount: totalStepCount,\n    currentStepCount: currentStepCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst CurrentStep = ({\n  value,\n  maxValue\n}) => {\n  return /*#__PURE__*/React.createElement(CurrentStepContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CurrentStepContentActive, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, value, \"/\"), /*#__PURE__*/React.createElement(CurrentStepContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 68\n    }\n  }, maxValue));\n};\n\nexport default StampCardDetails;","map":{"version":3,"sources":["/Users/blackjmxx/Devs/LiskRide/src/components/StampCardDetails/StampCardDetails.js"],"names":["React","Loader","Dimmer","buildStyles","CircularProgressbar","RewardsRow","ProgressProvider","NextRewardImage","CurrentStepContent","CurrentStepContainer","CurrentStepContentActive","Subtitle","SampCardDetailsContainer","SampCardDetailsCenterContainer","ProgressBarContainer","CenterContainer","StampCardDetails","totalStepCount","currentStepCount","stamps","rewardSteps","nextRewardStep","undefined","percentage","value","rotation","pathTransitionDuration","strokeLinecap","require","CurrentStep","maxValue"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Loader, Dimmer } from \"semantic-ui-react\";\nimport { buildStyles, CircularProgressbar } from \"react-circular-progressbar\";\nimport RewardsRow from '../RewardsRow/RewardsRow';\nimport ProgressProvider from '../ProgressProvider';\nimport './styles/style.scss'\nimport { NextRewardImage, CurrentStepContent, CurrentStepContainer, CurrentStepContentActive, Subtitle } from \"../CardAvatar/styles\";\nimport { SampCardDetailsContainer, SampCardDetailsCenterContainer, ProgressBarContainer, CenterContainer } from \"./styles\";\n\nconst StampCardDetails = ({\n  totalStepCount = 0,\n  currentStepCount = 0,\n  stamps,\n  rewardSteps,\n  nextRewardStep = 0,\n}) => {\n  \n  if (currentStepCount === null || currentStepCount === undefined || totalStepCount === 0 || totalStepCount === null || totalStepCount === undefined) {\n    return (<Dimmer page active inverted>\n      <Loader indeterminate>Chargement</Loader>\n    </Dimmer>);\n  }\n  let percentage = (currentStepCount * 100) / totalStepCount;\n  return (\n    <CenterContainer >\n      <ProgressBarContainer>\n        {<ProgressProvider valueStart={0} valueEnd={percentage}>\n          {value => <>\n            <CircularProgressbar\n              value={value}\n              strokeWidth={5}\n              circleRatio={0.75}\n              styles={buildStyles({\n                rotation: 1 / 2 + 1 / 8,\n                pathTransitionDuration: 2,\n                strokeLinecap: 'round',\n              })}\n            />\n            <CurrentStep value={currentStepCount} maxValue={totalStepCount} />\n          </>\n          }\n        </ProgressProvider>}\n        <NextRewardImage src={require('../../assets/images/present.svg')} />\n      </ProgressBarContainer>\n      <SampCardDetailsContainer>\n        <SampCardDetailsCenterContainer>\n\n          <Subtitle>\n            Plus que{\" \"}\n            {nextRewardStep} tampons avant votre\n                  <br />\n            prochaine surprise!\n      </Subtitle>\n        </SampCardDetailsCenterContainer>\n        <RewardsRow\n          stamps={stamps}\n          rewardSteps={rewardSteps}\n          maxStepCount={totalStepCount}\n          currentStepCount={currentStepCount} />\n      </SampCardDetailsContainer>\n    </CenterContainer>\n  );\n};\n\nconst CurrentStep = ({ value, maxValue }) => {\n  return (\n    <CurrentStepContainer>\n      <CurrentStepContentActive>{value}/</CurrentStepContentActive><CurrentStepContent>{maxValue}</CurrentStepContent>\n    </CurrentStepContainer>\n  )\n};\n\nexport default StampCardDetails"]},"metadata":{},"sourceType":"module"}