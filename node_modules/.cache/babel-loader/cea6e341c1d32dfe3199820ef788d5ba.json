{"ast":null,"code":"var _jsxFileName = \"/Users/blackjmxx/Devs/LiskRide/src/components/ScannerPage.js\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Message } from \"semantic-ui-react\";\nimport ScannerArea from \"./Scanner/ScannerArea/ScannerArea.js\";\nimport { FormattedMessage } from \"react-intl\";\n\nclass ScannerPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleScan = data => {\n      if (!data) {\n        this.toggleError(true);\n      } else {\n        this.props.addStampByValidationLink(data, this.props.history).then(() => {\n          this.closeScannerPage();\n        });\n      }\n    };\n\n    this.handleError = err => {\n      // eslint-disable-line no-unused-vars\n      this.props.changeQrMode(\"selectFromPhotos\");\n    };\n\n    this.toggleError = (toggleTo = null) => {\n      const {\n        errorOnScan\n      } = this.state;\n      this.setState({\n        errorOnScan: toggleTo === null ? !errorOnScan : toggleTo\n      });\n    };\n\n    this.toggleShowInfo = () => {\n      const {\n        showInfo\n      } = this.state;\n      this.setState({\n        showInfo: !showInfo\n      });\n    };\n\n    this.closeScannerPage = () => {\n      this.props.history.push(\"/home/card\");\n    };\n\n    this.openPopUp = () => {\n      this.setState({\n        showPopUp: true\n      });\n    };\n\n    this.closeUsePopUp = i => {\n      this.props.closeValidationModal();\n      this.props.history.push(\"/home\");\n    };\n\n    this.state = {\n      result: null,\n      errorOnScan: false,\n      showInfo: false,\n      showPopUp: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.changeQrMode(\"qrcodescan\");\n  }\n\n  render() {\n    const {\n      result,\n      errorOnScan\n    } = this.state;\n\n    if (result) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: {\n          pathname: `/scanResponse/${result}`,\n          state: {\n            from: this.props.location\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      });\n    }\n\n    if (this.props.qrscanMode === \"selectFromPhotos\" || this.props.qrscanMode === \"qrcodescan\") {\n      const qrscanModeIsqrcodescan = this.props.qrscanMode === \"qrcodescan\";\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ScannerArea, {\n        qrscanModeIsqrcodescan: qrscanModeIsqrcodescan,\n        mode: this.props.qrscanMode,\n        handleScan: this.handleScan,\n        handleError: this.handleError,\n        handleOnClickCloseIcon: this.closeScannerPage,\n        openImageDialog: this.openImageDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }), errorOnScan && !qrscanModeIsqrcodescan && /*#__PURE__*/React.createElement(Message, {\n        negative: true,\n        floating: true,\n        header: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"global.cantScanImageHeader\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }\n        }),\n        content: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"global.cantScanImageDescription\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }\n        }),\n        className: \"image-select-error-message\",\n        onDismiss: () => this.toggleError(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }));\n    }\n  }\n\n}\n\nexport default ScannerPage;","map":{"version":3,"sources":["/Users/blackjmxx/Devs/LiskRide/src/components/ScannerPage.js"],"names":["React","Redirect","Message","ScannerArea","FormattedMessage","ScannerPage","Component","constructor","props","handleScan","data","toggleError","addStampByValidationLink","history","then","closeScannerPage","handleError","err","changeQrMode","toggleTo","errorOnScan","state","setState","toggleShowInfo","showInfo","push","openPopUp","showPopUp","closeUsePopUp","i","closeValidationModal","result","componentDidMount","render","pathname","from","location","qrscanMode","qrscanModeIsqrcodescan","openImageDialog"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Message } from \"semantic-ui-react\";\nimport ScannerArea from \"./Scanner/ScannerArea/ScannerArea.js\";\nimport { FormattedMessage } from \"react-intl\";\n\nclass ScannerPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: null,\n      errorOnScan: false,\n      showInfo: false,\n      showPopUp: false\n    };\n  }\n  componentDidMount() {\n    this.props.changeQrMode(\"qrcodescan\");\n  }\n  handleScan = data => {\n    if (!data) {\n      this.toggleError(true);\n    } else {\n      this.props.addStampByValidationLink(data, this.props.history).then(() => {\n        this.closeScannerPage()\n      });\n    }\n  };\n\n  handleError = err => {\n    // eslint-disable-line no-unused-vars\n    this.props.changeQrMode(\"selectFromPhotos\");\n  };\n\n  toggleError = (toggleTo = null) => {\n    const { errorOnScan } = this.state;\n    this.setState({\n      errorOnScan: toggleTo === null ? !errorOnScan : toggleTo\n    });\n  };\n  toggleShowInfo = () => {\n    const { showInfo } = this.state;\n    this.setState({\n      showInfo: !showInfo\n    });\n  };\n\n  closeScannerPage = () => {\n    this.props.history.push(\"/home/card\");\n  };\n\n  openPopUp = () => {\n    this.setState({ showPopUp: true });\n  };\n\n  closeUsePopUp = i => {\n    this.props.closeValidationModal();\n    this.props.history.push(\"/home\");\n  };\n\n  render() {\n    const { result, errorOnScan } = this.state;\n    if (result) {\n      return (\n        <Redirect\n          to={{\n            pathname: `/scanResponse/${result}`,\n            state: { from: this.props.location }\n          }}\n        />\n      );\n    }\n    if (\n      this.props.qrscanMode === \"selectFromPhotos\" ||\n      this.props.qrscanMode === \"qrcodescan\"\n    ) {\n      const qrscanModeIsqrcodescan = this.props.qrscanMode === \"qrcodescan\";\n      return (\n        <>\n          <ScannerArea\n            qrscanModeIsqrcodescan={qrscanModeIsqrcodescan}\n            mode={this.props.qrscanMode}\n            handleScan={this.handleScan}\n            handleError={this.handleError}\n            handleOnClickCloseIcon={this.closeScannerPage}\n            openImageDialog={this.openImageDialog}\n          />\n          {errorOnScan && !qrscanModeIsqrcodescan && (\n            <Message\n              negative\n              floating\n              header={\n                <FormattedMessage\n                  id={\"global.cantScanImageHeader\"}\n                />\n              }\n              content={\n                <FormattedMessage\n                  id={\"global.cantScanImageDescription\"}\n                />\n              }\n              className=\"image-select-error-message\"\n              onDismiss={() => this.toggleError(false)}\n            />\n          )}\n        </>\n      );\n    }\n  }\n}\n\nexport default ScannerPage;\n"]},"metadata":{},"sourceType":"module"}