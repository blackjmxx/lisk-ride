{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _reduce = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/reduce\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar LocalDatastoreController = {\n  fromPinWithName: function (name\n  /*: string*/\n  ) {\n    var values, objects;\n    return _regenerator.default.async(function (_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regenerator.default.awrap(_Storage.default.getItemAsync(name));\n\n          case 2:\n            values = _context.sent;\n\n            if (values) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", []);\n\n          case 5:\n            objects = JSON.parse(values);\n            return _context.abrupt(\"return\", objects);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  },\n  pinWithName: function (name\n  /*: string*/\n  , value\n  /*: any*/\n  ) {\n    var values = (0, _stringify.default)(value);\n    return _Storage.default.setItemAsync(name, values);\n  },\n  unPinWithName: function (name\n  /*: string*/\n  ) {\n    return _Storage.default.removeItemAsync(name);\n  },\n  getAllContents: function () {\n    var keys;\n    return _regenerator.default.async(function (_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regenerator.default.awrap(_Storage.default.getAllKeysAsync());\n\n          case 2:\n            keys = _context3.sent;\n            return _context3.abrupt(\"return\", (0, _reduce.default)(keys).call(keys, function (previousPromise, key) {\n              var LDS, value;\n              return _regenerator.default.async(function (_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return _regenerator.default.awrap(previousPromise);\n\n                    case 2:\n                      LDS = _context2.sent;\n\n                      if (!(0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {\n                        _context2.next = 8;\n                        break;\n                      }\n\n                      _context2.next = 6;\n                      return _regenerator.default.awrap(_Storage.default.getItemAsync(key));\n\n                    case 6:\n                      value = _context2.sent;\n\n                      try {\n                        LDS[key] = JSON.parse(value);\n                      } catch (error) {\n                        console.error('Error getAllContents: ', error);\n                      }\n\n                    case 8:\n                      return _context2.abrupt(\"return\", LDS);\n\n                    case 9:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              });\n            }, _promise.default.resolve({})));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  },\n  // Used for testing\n  getRawStorage: function () {\n    var keys;\n    return _regenerator.default.async(function (_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regenerator.default.awrap(_Storage.default.getAllKeysAsync());\n\n          case 2:\n            keys = _context5.sent;\n            return _context5.abrupt(\"return\", (0, _reduce.default)(keys).call(keys, function (previousPromise, key) {\n              var LDS, value;\n              return _regenerator.default.async(function (_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      _context4.next = 2;\n                      return _regenerator.default.awrap(previousPromise);\n\n                    case 2:\n                      LDS = _context4.sent;\n                      _context4.next = 5;\n                      return _regenerator.default.awrap(_Storage.default.getItemAsync(key));\n\n                    case 5:\n                      value = _context4.sent;\n                      LDS[key] = value;\n                      return _context4.abrupt(\"return\", LDS);\n\n                    case 8:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              });\n            }, _promise.default.resolve({})));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    });\n  },\n  clear: function () {\n    var keys, toRemove, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, promises;\n\n    return _regenerator.default.async(function (_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regenerator.default.awrap(_Storage.default.getAllKeysAsync());\n\n          case 2:\n            keys = _context6.sent;\n            toRemove = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context6.prev = 7;\n\n            for (_iterator = (0, _getIterator2.default)(keys); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              key = _step.value;\n\n              if ((0, _LocalDatastoreUtils.isLocalDatastoreKey)(key)) {\n                toRemove.push(key);\n              }\n            }\n\n            _context6.next = 15;\n            break;\n\n          case 11:\n            _context6.prev = 11;\n            _context6.t0 = _context6[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context6.t0;\n\n          case 15:\n            _context6.prev = 15;\n            _context6.prev = 16;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 18:\n            _context6.prev = 18;\n\n            if (!_didIteratorError) {\n              _context6.next = 21;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 21:\n            return _context6.finish(18);\n\n          case 22:\n            return _context6.finish(15);\n\n          case 23:\n            promises = (0, _map.default)(toRemove).call(toRemove, this.unPinWithName);\n            return _context6.abrupt(\"return\", _promise.default.all(promises));\n\n          case 25:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, this, [[7, 11, 15, 23], [16,, 18, 22]]);\n  }\n};\nmodule.exports = LocalDatastoreController;","map":null,"metadata":{},"sourceType":"script"}